# Makefile for C code tests
# Generated by claude.ai, modified by me

# Compiler and flags
# Note the that the -DBUILD_TESTS is key to making this work. By default the Go toolchain will compile all C files
# including the test file which gets its own main() supplied by doctest. Unfortunately this will conflict with the
# main function generated by Go and the link step will fail. We want the C test file to be a standalone executable
# so we use BUILD_TESTS to control whether doctest will provide a main function. The Go toolchain won't define this
# and hence the test file will still compile successfully without a main function.
CXX = clang++
CXXFLAGS = -std=c++11 -Wall -Wextra -g -DBUILD_TESTS
INCLUDES = -I.

TEST_SRC = pqivf_neon_test.cc pqivf_neon.cc
TEST_TARGET = test_runner

# Object files
OBJ = $(SRC:.cc=.o)
TEST_OBJ = $(TEST_SRC:.cc=.o)

.PHONY: all
all: test

# Compile source file
%.o: %.cc
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

$(TEST_TARGET): $(OBJ) $(TEST_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $^

# Run tests
.PHONY: test
test: $(TEST_TARGET)
	./$(TEST_TARGET)

# Clean up
.PHONY: clean
clean:
	rm -f $(OBJ) $(TEST_OBJ) $(TEST_TARGET)

# Check compilation without running tests
.PHONY: build
build: $(TEST_TARGET)
